// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  name          String
  role          Role            @default(BUYER) // Default role is BUYER
  phone         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  gender        String?
  birthDate     DateTime?
  isVerified    Boolean         @default(false)
  store         Store?
  orders        Order[]         @relation("UserOrders")
  reviews       ProductReview[]
  addresses     Address[] // User can have multiple addresses
  cart          Cart?
  wishlistItems WishlistItem[]
  notifications Notification[]
  Rider         Rider?
  isSeller      Boolean         @default(false)
  isRider       Boolean         @default(false)
}

model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String? // Optional for some regions
  // phone      String?
  country    String
  isDefault  Boolean  @default(false) // Flag to indicate if this is the user's primary/default address
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Foreign key to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Orders associated with this specific address (e.g., shipping address for an order)
  orders Order[]
}

model Store {
  id           String        @id @default(cuid())
  name         String        @unique
  slug         String        @unique // Slug for SEO-friendly URLs
  description  String?
  accountType  AccountType   @default(INDIVIDUAL) // e.g., "individual", "business"
  country      String?
  state        String?
  contactEmail String?       @unique
  contactPhone String?
  isActive     Boolean       @default(false) // Whether the store is active or not
  logo         String?
  banner       String[]
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  products     Product[]
  orderItems   OrderItem[]   @relation("StoreOrderItems")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Discount     Discount[]
  customerCare CustomerCare?
  contact      Contact?
  businessInfo BusinessInfo?
  shippingInfo ShippingInfo?
}

model CustomerCare {
  id         String  @id @default(cuid())
  name       String  @unique
  email      String? @unique
  phone      String?
  storeId    String  @unique
  store      Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  address1   String
  address2   String
  city       String
  state      String
  postalCode String?
  country    String
}

model Contact {
  id      String @id @default(cuid())
  name    String @unique
  email   String @unique
  phone   String
  storeId String @unique
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model BusinessInfo {
  id           String  @id @default(cuid())
  storeId      String  @unique
  store        Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  fullName     String
  idType       IdType // e.g., NATIONAL_ID, PASSPORT, etc.
  idNumber     String // e.g., National ID number, Passport number, etc.
  idImageFront String // Optional, e.g., image of the ID document
  idImageBack  String // Optional, e.g., image of the back of the ID document
  vatNumber    String? // Optional, e.g., for businesses that need to provide a VAT number
  taxId        String // Optional, e.g., for businesses that need to provide a tax ID
  taxIdImage   String // Optional, e.g., image of the tax ID document
  address1     String
  address2     String?
  city         String
  state        String
  postalCode   String?
  country      String
  isComplete   Boolean @default(false) // Whether all required business info is provided
}

model ShippingInfo {
  id                 String  @id @default(cuid())
  shippingZone       String
  shippingAddress1   String
  shippingAddress2   String?
  shippingCity       String
  shippingState      String
  shippingCountry    String
  shippingPostalCode String?
  returnAddress1     String
  returnAddress2     String?
  returnCity         String
  returnState        String
  returnCountry      String
  returnPostalCode   String?
  isComplete         Boolean @default(false) // Whether all required business info is provided
  storeId            String  @unique
  store              Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Product {
  id                String          @id @default(uuid())
  name              String
  slug              String          @unique // Slug for SEO-friendly URLs
  description       String
  price             Float?
  stock             Int?
  lowStockThreshold Int? // NEW: Alert when stock falls below this
  images            String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  status            ProductStatus   @default(ACTIVE)
  storeId           String
  store             Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId        String
  category          Category        @relation(fields: [categoryId], references: [id])
  subCategoryId     String
  subCategory       SubCategory     @relation(fields: [subCategoryId], references: [id])
  subSubCategoryId  String?
  subSubCategory    SubSubCategory? @relation(fields: [subSubCategoryId], references: [id])

  variants      ProductVariant[]
  reviews       ProductReview[]
  discounts     Discount[]
  soldCount     Int              @default(0) // Optional optimization
  wishlistItems WishlistItem[]
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  // title     String
  size      String?
  color     String?
  price     Float
  stock     Int
  sku       String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
  cartItems  CartItem[] // NEW: Variants can be in cart items
}

model ProductReview {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Float // 1 to 5
  comment   String
  createdAt DateTime @default(now())
  reply     String? // Seller/admin reply
}

model Discount {
  id                String  @id @default(uuid())
  code              String  @unique // e.g., "SUMMER20"
  description       String?
  percentage        Float? // e.g., 20.0 for 20%
  amount            Float? // e.g., 10.00 for $10 off
  minOrderAmount    Float? // Minimum order amount for discount to apply
  maxDiscountAmount Float? // Maximum discount amount for percentage discounts

  startsAt  DateTime
  expiresAt DateTime
  isActive  Boolean  @default(true) // Can be manually toggled or automatically based on dates

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Many-to-many relationship with Product if discounts can apply to specific products
  products Product[] // Products that this discount applies to

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([code])
  @@index([expiresAt])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  subCategories SubCategory[]
  products      Product[]
  slug          String        @unique // Slug for SEO-friendly URLs
  image         String?
}

model SubCategory {
  id               String           @id @default(uuid())
  name             String
  categoryId       String
  category         Category         @relation(fields: [categoryId], references: [id])
  subSubCategories SubSubCategory[]
  products         Product[]
  slug             String           @unique // Slug for SEO-friendly URLs
  image            String?
}

model SubSubCategory {
  id            String      @id @default(uuid())
  name          String
  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  products      Product[]
  slug          String      @unique // Slug for SEO-friendly URLs
  image         String?
}

model Order {
  id                    String      @id @default(uuid())
  total                 Float
  status                OrderStatus @default(PENDING)
  stripePaymentIntentId String?
  stripeRefundId        String? // Refund ID from Stripe
  refundStatus          String? // "PENDING", "SUCCEEDED", "FAILED", etc.
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  deliveredAt           DateTime? // NEW: When the order was delivered
  paidAt                DateTime? // NEW: When the order was paid
  shippedAt             DateTime? // NEW: When the order was shipped
  refundRequestedAt     DateTime? // NEW: When the refund was requested

  cancelledAt DateTime? // NEW: When the order was cancelled
  buyerId     String
  buyer       User        @relation("UserOrders", fields: [buyerId], references: [id])
  items       OrderItem[]
  addressId   String? // NEW: Link to the specific Address used for this order
  address     Address?    @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id               String         @id @default(uuid())
  quantity         Int
  price            Float
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  storeId          String
  store            Store          @relation("StoreOrderItems", fields: [storeId], references: [id])
  deliveryStatus   DeliveryStatus @default(PENDING)
  deliveredAt      DateTime?
  assignedAt       DateTime? // When the rider is assigned
  deliveryItem     DeliveryItem?
}

model DeliveryItem {
  id          String    @id @default(uuid())
  orderItemId String    @unique
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  riderId     String?
  rider       Rider?    @relation(fields: [riderId], references: [id])

  // codes
  pickupCodeHash      String?
  pickupCodeExpires   DateTime?
  deliveryCodeHash    String?
  deliveryCodeExpires DateTime?
  attempts            Int       @default(0)

  // logistics lifecycle
  status           DeliveryStatus @default(PENDING)
  acceptedAt       DateTime?
  pickedUpAt       DateTime?
  deliveredAt      DateTime?
  cancelledAt      DateTime?
  reofferedAt      DateTime?
  pickupDeadline   DateTime? // ⏱ Rider must pick up before this
  deliveryDeadline DateTime? // ⏱ Rider must deliver before this

  // geolocation for matching riders
  sellerLat      Float?
  sellerLng      Float?
  currentLat     Float?
  currentLng     Float?
  currentGeohash String? // for proximity queries (GeoHash5)
  sellerGeohash  String?
  offerExpiresAt DateTime? // typically now + 15m
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Rider Model
model Rider {
  id       String  @id @default(uuid())
  isActive Boolean @default(false)

  // 1. Personal & Contact Info (from RiderInfoSchema)
  firstName   String
  lastName    String
  email       String   @unique // Keep this here for direct communication
  phoneNumber String   @unique
  gender      Gender
  dateOfBirth DateTime

  // 2. Next of Kin
  nextOfKinName  String
  nextOfKinPhone String

  // 3. Verification & Documents
  nin                 String  @unique
  ninImage            String? // Optional field for image URL
  bvn                 String? @unique // Optional as per your schema
  profileImage        String?
  driversLicenseImage String?

  // 4. Vehicle Information
  plateNumber                 String      @unique
  vehicleType                 VehicleType
  vehicleModel                String
  vehicleColor                String
  vehicleRegistrationDocument String?

  // 5. Guarantor Information
  guarantor1Name         String
  guarantor1Phone        String
  guarantor1Relationship GuarantorRelationship
  guarantor2Name         String
  guarantor2Phone        String
  guarantor2Relationship GuarantorRelationship

  // 6. Bank Account Details
  bankName      String
  accountNumber String
  accountName   String

  // 7. Core User & Location Tracking
  userId     String         @unique
  user       User           @relation(fields: [userId], references: [id])
  status     RiderStatus    @default(PENDING_APPROVAL)
  // 🔥 Location tracking
  latitude   Float?
  longitude  Float?
  geohash    String?
  deliveries DeliveryItem[]

  // Penalties & Ratings
  suspensionUntil  DateTime?
  reliabilityScore Int       @default(100) // starts from 100
  penaltyCount     Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OtpToken {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// NEW MODEL: Cart
model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique // Ensures one cart per user
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[] // Items currently in the cart
}

// NEW MODEL: CartItem
model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // A user can only add a specific product to their wishlist once
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  REFUND_REQUESTED
  //   DELIVERED_PENDING_CONFIRMATION
  // OUT_FOR_DELIVERY
  // READY_FOR_PICKUP
}

enum Role {
  BUYER
  SELLER
  ADMIN
  RIDER
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
  OUT_OF_STOCK
}

enum DeliveryStatus {
  PENDING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURN_REQUESTED
  RETURN_APPROVED
  RETURN_IN_TRANSIT
  RETURNED
}

model Notification {
  id        String           @id @default(cuid())
  userId    String // The ID of the user (buyer or seller) who receives the notification
  userRole  Role // To distinguish if the notification is for a BUYER or SELLER
  type      NotificationType // The type of notification (e.g., ORDER_STATUS_UPDATE)
  title     String // Short, descriptive title for the notification
  message   String // Full notification content
  link      String? // Optional URL to navigate to (e.g., order details page)
  read      Boolean          @default(false) // Whether the notification has been read
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, userRole])
  @@index([read])
  @@index([createdAt])
}

enum NotificationType {
  // General Order-related notifications
  ORDER_STATUS_UPDATE
  DELIVERY_CONFIRMATION
  RETURN_REQUEST
  FAILED_DELIVERY

  // Seller-specific notifications
  NEW_ORDER
  LOW_STOCK_THRESHOLD
  OUT_OF_STOCK
  PRODUCT_REVIEW_RECEIVED
  RETURN_PROCESSED_SELLER_SIDE
  ORDER_CANCELLED_BY_BUYER

  // Buyer-specific notifications
  PROMOTION
  NEW_MESSAGE
  ORDER_CONFIRMATION
  SHIPPING_UPDATE
  REFUND_PROCESSED_BUYER_SIDE
  ORDER_CANCELLED_BY_SELLER
  // Add other types as needed
}

enum AccountType {
  INDIVIDUAL
  BUSINESS
  // Add other account types as needed
}

enum IdType {
  NATIONAL_ID
  PASSPORT
  DRIVER_LICENSE
  VOTER_ID
}

enum VehicleType {
  MOTORCYCLE
  BICYCLE
  CAR
  VAN
  SCOOTER
}

enum GuarantorRelationship {
  FATHER
  MOTHER
  BROTHER
  SISTER
  SPOUSE
  UNCLE
  AUNTY
}

enum Gender {
  MALE
  FEMALE
}

enum RiderStatus {
  PENDING_APPROVAL
  VERIFIED
  ACTIVE
  DELIVERING
  UNAVAILABLE
  SUSPENDED
}
