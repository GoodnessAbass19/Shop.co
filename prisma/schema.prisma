// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  isBuyer   Boolean  @default(true)
  isSeller  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store  Store?
  orders Order[] @relation("OrderBuyer")
}

model Store {
  id          String    @id @default(cuid())
  name        String
  description String?
  logo        String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[] // Array of image URLs
  sizes       String[] // e.g., ["S", "M", "L"]
  colors      String[] // e.g., ["red", "blue"]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Order {
  id        String      @id @default(uuid())
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  buyerId String
  buyer   User        @relation("OrderBuyer", fields: [buyerId], references: [id])
  items   OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
