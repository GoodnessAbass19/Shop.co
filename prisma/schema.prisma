// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  name          String
  role          Role            @default(BUYER) // Default role is BUYER
  phone         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  gender        String?
  birthDate     DateTime?
  isVerified    Boolean         @default(false)
  store         Store?
  orders        Order[]         @relation("UserOrders")
  reviews       ProductReview[]
  addresses     Address[] // User can have multiple addresses
  cart          Cart?
  wishlistItems WishlistItem[]
}

model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String? // Optional for some regions
  // phone      String?
  country    String
  isDefault  Boolean  @default(false) // Flag to indicate if this is the user's primary/default address
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Foreign key to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Orders associated with this specific address (e.g., shipping address for an order)
  orders Order[]
}

model Store {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique // Slug for SEO-friendly URLs
  description String?
  logo        String?
  banner      String[]
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    Product[]
  orderItems  OrderItem[] @relation("StoreOrderItems")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id                String          @id @default(uuid())
  name              String
  slug              String          @unique // Slug for SEO-friendly URLs
  description       String
  price             Float?
  stock             Int?
  lowStockThreshold Int? // NEW: Alert when stock falls below this
  images            String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  status            ProductStatus   @default(ACTIVE)
  storeId           String
  store             Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId        String
  category          Category        @relation(fields: [categoryId], references: [id])
  subCategoryId     String
  subCategory       SubCategory     @relation(fields: [subCategoryId], references: [id])
  subSubCategoryId  String?
  subSubCategory    SubSubCategory? @relation(fields: [subSubCategoryId], references: [id])

  variants      ProductVariant[]
  reviews       ProductReview[]
  discounts     Discount[]
  soldCount     Int              @default(0) // Optional optimization
  wishlistItems WishlistItem[]
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  // title     String
  size      String?
  color     String?
  price     Float
  stock     Int
  sku       String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
  cartItems  CartItem[] // NEW: Variants can be in cart items
}

model ProductReview {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Float // 1 to 5
  comment   String
  createdAt DateTime @default(now())
  reply     String? // Seller/admin reply
}

model Discount {
  id            String    @id @default(uuid())
  code          String?   @unique // Optional for automatic discounts
  description   String
  percentage    Float // e.g., 10.0 means 10% off
  expiresAt     DateTime?
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  canBeCombined Boolean   @default(false) // Whether stackable
  createdAt     DateTime  @default(now())
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  subCategories SubCategory[]
  products      Product[]
  slug          String        @unique // Slug for SEO-friendly URLs
  image         String?
}

model SubCategory {
  id               String           @id @default(uuid())
  name             String
  categoryId       String
  category         Category         @relation(fields: [categoryId], references: [id])
  subSubCategories SubSubCategory[]
  products         Product[]
  slug             String           @unique // Slug for SEO-friendly URLs
  image            String?
}

model SubSubCategory {
  id            String      @id @default(uuid())
  name          String
  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  products      Product[]
  slug          String      @unique // Slug for SEO-friendly URLs
  image         String?
}

model Order {
  id                    String      @id @default(uuid())
  total                 Float
  status                OrderStatus @default(PENDING)
  stripePaymentIntentId String?
  stripeRefundId        String? // Refund ID from Stripe
  refundStatus          String? // "PENDING", "SUCCEEDED", "FAILED", etc.
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  deliveredAt           DateTime? // NEW: When the order was delivered
  paidAt                DateTime? // NEW: When the order was paid
  shippedAt             DateTime? // NEW: When the order was shipped
  refundRequestedAt     DateTime? // NEW: When the refund was requested

  cancelledAt DateTime? // NEW: When the order was cancelled
  buyerId     String
  buyer       User        @relation("UserOrders", fields: [buyerId], references: [id])
  items       OrderItem[]
  addressId   String? // NEW: Link to the specific Address used for this order
  address     Address?    @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  storeId String
  store   Store  @relation("StoreOrderItems", fields: [storeId], references: [id])
}

model OtpToken {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// NEW MODEL: Cart
model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique // Ensures one cart per user
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[] // Items currently in the cart
}

// NEW MODEL: CartItem
model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // A user can only add a specific product to their wishlist once
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  REFUND_REQUESTED
  //   DELIVERED_PENDING_CONFIRMATION
  // OUT_FOR_DELIVERY
  // READY_FOR_PICKUP
}

enum Role {
  BUYER
  SELLER
  // ADMIN
  // DISPATCH
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
  OUT_OF_STOCK
}
