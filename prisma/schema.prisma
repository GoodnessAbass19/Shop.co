// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @map("_id")
  email     String    @unique
  password  String
  username  String
  role      UserRole  @default(CUSTOMER)
  addresses Address[]
  orders    Order[]
  cart      Cart?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  order     Order  @relation(fields: [orderId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  street    String
  city      String
  state     String
  zip       String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.ObjectId
  name      String
  slug      String
  image     String
  price     Float
  quantity  Int
  size      String? // Nullable for optional size
  color     String? // Nullable for optional color
}
